// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  image     String?
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Product {
  id          Int        @id @default(autoincrement())
  userId      Int
  name        String
  description String
  price       Int
  tags        String[]
  images      String[]
  comments    Comment[]
  favorites   Favorite[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int?
  articleId Int?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  nickname     String
  image        String?
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  articles     Article[]
  products     Product[]
  comments     Comment[]
  favorites    Favorite[]
  likes        Like[]
  notification Notification[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  articleId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  type      NotificationType
  payload   Json
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  PRICE_CHANGED
  NEW_COMMENT
}
